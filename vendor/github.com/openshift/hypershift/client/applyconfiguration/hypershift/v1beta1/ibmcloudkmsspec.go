/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// IBMCloudKMSSpecApplyConfiguration represents a declarative configuration of the IBMCloudKMSSpec type for use
// with apply.
type IBMCloudKMSSpecApplyConfiguration struct {
	Region  *string                                 `json:"region,omitempty"`
	Auth    *IBMCloudKMSAuthSpecApplyConfiguration  `json:"auth,omitempty"`
	KeyList []IBMCloudKMSKeyEntryApplyConfiguration `json:"keyList,omitempty"`
}

// IBMCloudKMSSpecApplyConfiguration constructs a declarative configuration of the IBMCloudKMSSpec type for use with
// apply.
func IBMCloudKMSSpec() *IBMCloudKMSSpecApplyConfiguration {
	return &IBMCloudKMSSpecApplyConfiguration{}
}

// WithRegion sets the Region field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Region field is set to the value of the last call.
func (b *IBMCloudKMSSpecApplyConfiguration) WithRegion(value string) *IBMCloudKMSSpecApplyConfiguration {
	b.Region = &value
	return b
}

// WithAuth sets the Auth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Auth field is set to the value of the last call.
func (b *IBMCloudKMSSpecApplyConfiguration) WithAuth(value *IBMCloudKMSAuthSpecApplyConfiguration) *IBMCloudKMSSpecApplyConfiguration {
	b.Auth = value
	return b
}

// WithKeyList adds the given value to the KeyList field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the KeyList field.
func (b *IBMCloudKMSSpecApplyConfiguration) WithKeyList(values ...*IBMCloudKMSKeyEntryApplyConfiguration) *IBMCloudKMSSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithKeyList")
		}
		b.KeyList = append(b.KeyList, *values[i])
	}
	return b
}
