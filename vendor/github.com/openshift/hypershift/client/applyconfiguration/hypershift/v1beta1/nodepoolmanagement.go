/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	hypershiftv1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
)

// NodePoolManagementApplyConfiguration represents a declarative configuration of the NodePoolManagement type for use
// with apply.
type NodePoolManagementApplyConfiguration struct {
	UpgradeType *hypershiftv1beta1.UpgradeType    `json:"upgradeType,omitempty"`
	Replace     *ReplaceUpgradeApplyConfiguration `json:"replace,omitempty"`
	InPlace     *InPlaceUpgradeApplyConfiguration `json:"inPlace,omitempty"`
	AutoRepair  *bool                             `json:"autoRepair,omitempty"`
}

// NodePoolManagementApplyConfiguration constructs a declarative configuration of the NodePoolManagement type for use with
// apply.
func NodePoolManagement() *NodePoolManagementApplyConfiguration {
	return &NodePoolManagementApplyConfiguration{}
}

// WithUpgradeType sets the UpgradeType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpgradeType field is set to the value of the last call.
func (b *NodePoolManagementApplyConfiguration) WithUpgradeType(value hypershiftv1beta1.UpgradeType) *NodePoolManagementApplyConfiguration {
	b.UpgradeType = &value
	return b
}

// WithReplace sets the Replace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replace field is set to the value of the last call.
func (b *NodePoolManagementApplyConfiguration) WithReplace(value *ReplaceUpgradeApplyConfiguration) *NodePoolManagementApplyConfiguration {
	b.Replace = value
	return b
}

// WithInPlace sets the InPlace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InPlace field is set to the value of the last call.
func (b *NodePoolManagementApplyConfiguration) WithInPlace(value *InPlaceUpgradeApplyConfiguration) *NodePoolManagementApplyConfiguration {
	b.InPlace = value
	return b
}

// WithAutoRepair sets the AutoRepair field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoRepair field is set to the value of the last call.
func (b *NodePoolManagementApplyConfiguration) WithAutoRepair(value bool) *NodePoolManagementApplyConfiguration {
	b.AutoRepair = &value
	return b
}
