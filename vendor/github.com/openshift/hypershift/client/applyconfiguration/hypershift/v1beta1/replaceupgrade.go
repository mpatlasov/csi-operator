/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	hypershiftv1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
)

// ReplaceUpgradeApplyConfiguration represents a declarative configuration of the ReplaceUpgrade type for use
// with apply.
type ReplaceUpgradeApplyConfiguration struct {
	Strategy      *hypershiftv1beta1.UpgradeStrategy `json:"strategy,omitempty"`
	RollingUpdate *RollingUpdateApplyConfiguration   `json:"rollingUpdate,omitempty"`
}

// ReplaceUpgradeApplyConfiguration constructs a declarative configuration of the ReplaceUpgrade type for use with
// apply.
func ReplaceUpgrade() *ReplaceUpgradeApplyConfiguration {
	return &ReplaceUpgradeApplyConfiguration{}
}

// WithStrategy sets the Strategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Strategy field is set to the value of the last call.
func (b *ReplaceUpgradeApplyConfiguration) WithStrategy(value hypershiftv1beta1.UpgradeStrategy) *ReplaceUpgradeApplyConfiguration {
	b.Strategy = &value
	return b
}

// WithRollingUpdate sets the RollingUpdate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RollingUpdate field is set to the value of the last call.
func (b *ReplaceUpgradeApplyConfiguration) WithRollingUpdate(value *RollingUpdateApplyConfiguration) *ReplaceUpgradeApplyConfiguration {
	b.RollingUpdate = value
	return b
}
