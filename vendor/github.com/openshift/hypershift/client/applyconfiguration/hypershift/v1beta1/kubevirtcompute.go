/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	hypershiftv1beta1 "github.com/openshift/hypershift/api/hypershift/v1beta1"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// KubevirtComputeApplyConfiguration represents a declarative configuration of the KubevirtCompute type for use
// with apply.
type KubevirtComputeApplyConfiguration struct {
	Memory   *resource.Quantity          `json:"memory,omitempty"`
	Cores    *uint32                     `json:"cores,omitempty"`
	QosClass *hypershiftv1beta1.QoSClass `json:"qosClass,omitempty"`
}

// KubevirtComputeApplyConfiguration constructs a declarative configuration of the KubevirtCompute type for use with
// apply.
func KubevirtCompute() *KubevirtComputeApplyConfiguration {
	return &KubevirtComputeApplyConfiguration{}
}

// WithMemory sets the Memory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Memory field is set to the value of the last call.
func (b *KubevirtComputeApplyConfiguration) WithMemory(value resource.Quantity) *KubevirtComputeApplyConfiguration {
	b.Memory = &value
	return b
}

// WithCores sets the Cores field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cores field is set to the value of the last call.
func (b *KubevirtComputeApplyConfiguration) WithCores(value uint32) *KubevirtComputeApplyConfiguration {
	b.Cores = &value
	return b
}

// WithQosClass sets the QosClass field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the QosClass field is set to the value of the last call.
func (b *KubevirtComputeApplyConfiguration) WithQosClass(value hypershiftv1beta1.QoSClass) *KubevirtComputeApplyConfiguration {
	b.QosClass = &value
	return b
}
