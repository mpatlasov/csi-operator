/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// VolumeApplyConfiguration represents a declarative configuration of the Volume type for use
// with apply.
type VolumeApplyConfiguration struct {
	Size          *int64  `json:"size,omitempty"`
	Type          *string `json:"type,omitempty"`
	IOPS          *int64  `json:"iops,omitempty"`
	Encrypted     *bool   `json:"encrypted,omitempty"`
	EncryptionKey *string `json:"encryptionKey,omitempty"`
}

// VolumeApplyConfiguration constructs a declarative configuration of the Volume type for use with
// apply.
func Volume() *VolumeApplyConfiguration {
	return &VolumeApplyConfiguration{}
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *VolumeApplyConfiguration) WithSize(value int64) *VolumeApplyConfiguration {
	b.Size = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *VolumeApplyConfiguration) WithType(value string) *VolumeApplyConfiguration {
	b.Type = &value
	return b
}

// WithIOPS sets the IOPS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IOPS field is set to the value of the last call.
func (b *VolumeApplyConfiguration) WithIOPS(value int64) *VolumeApplyConfiguration {
	b.IOPS = &value
	return b
}

// WithEncrypted sets the Encrypted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encrypted field is set to the value of the last call.
func (b *VolumeApplyConfiguration) WithEncrypted(value bool) *VolumeApplyConfiguration {
	b.Encrypted = &value
	return b
}

// WithEncryptionKey sets the EncryptionKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EncryptionKey field is set to the value of the last call.
func (b *VolumeApplyConfiguration) WithEncryptionKey(value string) *VolumeApplyConfiguration {
	b.EncryptionKey = &value
	return b
}
